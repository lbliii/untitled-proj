The application we are working together on is a play-by-post roleplay forum application that uses SvelteKit, PocketBase, TailwindCSS, Zod, and DaisyUI. 


When programming:

- Always use an existing zod schema if one exists for the data you are working with. If no schema exists, create one using zod and place it in the src/lib/schemas directory.

- Always design API calls to route server side through the /routes/api/ directory from the +page.server.ts file unless the data is to be used client side only.

- APIs should be using the pocketbase sdk (pb) there is a technical reason not to.

- If the appropriate API endpoint or method does not exist, create one in the /routes/api/ directory.

- When designing components, layouts, or pages, always consider how to best implement the design using the tools and frameworks available. This includes using SvelteKit, PocketBase, TailwindCSS, Zod, and DaisyUI.

- The User object is available in the locals variable from the +layout.ts file.

Development Strategy for Modern Forum Application
ðŸš€ Overview

Your application is a play-by-post roleplay forum built with the following technologies:
Frontend: SvelteKit, TailwindCSS, DaisyUI
Backend: PocketBase
Validation: Zod

The strategy focuses on:
Data Mutations & Authentication: Handled via dedicated API routes.
Data Fetching & Organization: Managed directly within server-side pages for efficient rendering.

---

ðŸ›  1. Architectural Layout
A. Directory Structure
Organize your project to clearly separate API routes, server-side logic, and frontend components:

src/
â”œâ”€â”€ lib/
â”‚   â”œâ”€â”€ schemas/           # Zod schemas
â”‚   â”œâ”€â”€ services/          # Service layer for shared logic
â”‚   â””â”€â”€ pocketbase.js      # PocketBase initialization
â”œâ”€â”€ routes/
â”‚   â”œâ”€â”€ api/
â”‚   â”‚   â”œâ”€â”€ auth/
â”‚   â”‚   â”‚   â””â”€â”€ +server.ts  # Authentication APIs
â”‚   â”‚   â”œâ”€â”€ forums/
â”‚   â”‚   â”‚   â”œâ”€â”€ [id]/
â”‚   â”‚   â”‚   â”‚   â””â”€â”€ +server.ts  # CRUD APIs for specific forum
â”‚   â”‚   â”‚   â””â”€â”€ +server.ts      # CRUD APIs for forums
â”‚   â”‚   â””â”€â”€ ...                  # Other API routes (threads, posts, etc.)
â”‚   â”œâ”€â”€ forums/
â”‚   â”‚   â”œâ”€â”€ [identifier]/
â”‚   â”‚   â”‚   â”œâ”€â”€ +page.svelte
â”‚   â”‚   â”‚   â””â”€â”€ +page.server.ts
â”‚   â”‚   â””â”€â”€ +page.svelte
â”‚   â””â”€â”€ ...                        # Other routes
â”œâ”€â”€ components/
â”‚   â””â”€â”€ ...                        # Reusable Svelte components
â””â”€â”€ ...                            # Other directories/files

B. Service Layer

A Service Layer (src/lib/services/) encapsulates business logic and data operations. This promotes reusability and separation of concerns, allowing both API routes and server pages to utilize the same functions without duplication.